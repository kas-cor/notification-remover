name: Android CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  JAVA_VERSION: '17'
  JAVA_DISTRIBUTION: 'temurin'

jobs:
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
    
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Run unit tests
      run: ./gradlew test --no-daemon --stacktrace
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          app/build/test-results/
          app/build/reports/tests/
        retention-days: 30
    
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Unit Test Results
        path: '**/TEST-*.xml'
        reporter: java-junit
        fail-on-error: true

  lint:
    name: Code Quality & Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
    
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Run lint checks
      run: ./gradlew lint --no-daemon --stacktrace
    
    - name: Upload lint results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lint-results
        path: |
          app/build/reports/lint-results-*.html
          app/build/reports/lint-results-*.xml
        retention-days: 30

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-debug:
    name: Build Debug APK
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
    
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Generate version info
      run: |
        echo "VERSION_NAME=$(git describe --tags --always)" >> $GITHUB_ENV
        echo "VERSION_CODE=$GITHUB_RUN_NUMBER" >> $GITHUB_ENV
        echo "BUILD_TIME=$(date -u +%Y%m%d_%H%M%S)" >> $GITHUB_ENV
    
    - name: Build debug APK
      run: ./gradlew assembleDebug --no-daemon --stacktrace
      env:
        VERSION_NAME: ${{ env.VERSION_NAME }}
        VERSION_CODE: ${{ env.VERSION_CODE }}
    
    - name: Sign APK
      uses: r0adkll/sign-android-release@v1
      if: github.event_name != 'pull_request'
      id: sign_app
      with:
        releaseDirectory: app/build/outputs/apk/debug
        signingKeyBase64: ${{ secrets.SIGNING_KEY }}
        alias: ${{ secrets.ALIAS }}
        keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
        keyPassword: ${{ secrets.KEY_PASSWORD }}
      env:
        BUILD_TOOLS_VERSION: "34.0.0"
    
    - name: Rename APK
      run: |
        cd app/build/outputs/apk/debug
        if [ -f "app-debug-signed.apk" ]; then
          mv app-debug-signed.apk "NotificationRemover-${VERSION_NAME}-${BUILD_TIME}.apk"
        else
          mv app-debug.apk "NotificationRemover-${VERSION_NAME}-${BUILD_TIME}.apk"
        fi
    
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: debug-apk-${{ env.VERSION_NAME }}
        path: app/build/outputs/apk/debug/NotificationRemover-*.apk
        retention-days: 90
    
    - name: APK Info
      run: |
        APK_FILE=$(find app/build/outputs/apk/debug -name "NotificationRemover-*.apk")
        echo "📱 APK built successfully!"
        echo "📁 File: $(basename $APK_FILE)"
        echo "📊 Size: $(du -h $APK_FILE | cut -f1)"
        echo "🔍 Path: $APK_FILE"

  build-release:
    name: Build Release APK
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
    
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Extract version from tag
      run: |
        echo "VERSION_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        echo "VERSION_CODE=$GITHUB_RUN_NUMBER" >> $GITHUB_ENV
    
    - name: Build release APK
      run: ./gradlew assembleRelease --no-daemon --stacktrace
      env:
        VERSION_NAME: ${{ env.VERSION_NAME }}
        VERSION_CODE: ${{ env.VERSION_CODE }}
    
    - name: Sign release APK
      uses: r0adkll/sign-android-release@v1
      id: sign_app
      with:
        releaseDirectory: app/build/outputs/apk/release
        signingKeyBase64: ${{ secrets.SIGNING_KEY }}
        alias: ${{ secrets.ALIAS }}
        keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
        keyPassword: ${{ secrets.KEY_PASSWORD }}
      env:
        BUILD_TOOLS_VERSION: "34.0.0"
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          app/build/outputs/apk/release/app-release-signed.apk
        name: NotificationRemover ${{ env.VERSION_NAME }}
        body_path: RELEASE_NOTES_${{ env.VERSION_NAME }}.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-to-play-store:
    name: Deploy to Play Store
    runs-on: ubuntu-latest
    needs: [build-release]
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, 'beta') && !contains(github.ref, 'alpha')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download release APK
      uses: actions/download-artifact@v4
      with:
        name: release-apk
    
    - name: Deploy to Play Store
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
        packageName: com.example.notificationremover
        releaseFiles: app/build/outputs/apk/release/app-release-signed.apk
        track: production
        status: completed
        mappingFile: app/build/outputs/mapping/release/mapping.txt