name: Release Management

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.3.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
      is-prerelease: ${{ steps.check-prerelease.outputs.is-prerelease }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Extract version
      id: extract-version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Releasing version: $VERSION"
    
    - name: Check if pre-release
      id: check-prerelease
      run: |
        VERSION="${{ steps.extract-version.outputs.version }}"
        if [[ "$VERSION" =~ (alpha|beta|rc) ]] || [ "${{ github.event.inputs.prerelease }}" = "true" ]; then
          echo "is-prerelease=true" >> $GITHUB_OUTPUT
          echo "This is a pre-release"
        else
          echo "is-prerelease=false" >> $GITHUB_OUTPUT
          echo "This is a stable release"
        fi
    
    - name: Validate version format
      run: |
        VERSION="${{ steps.extract-version.outputs.version }}"
        if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
          echo "❌ Invalid version format: $VERSION"
          echo "Expected format: v1.2.3 or v1.2.3-beta.1"
          exit 1
        fi
        echo "✅ Version format is valid: $VERSION"
    
    - name: Check changelog
      run: |
        VERSION="${{ steps.extract-version.outputs.version }}"
        CHANGELOG_FILE="RELEASE_NOTES_${VERSION}.md"
        if [ ! -f "$CHANGELOG_FILE" ]; then
          echo "⚠️ Warning: Release notes file $CHANGELOG_FILE not found"
          echo "Creating basic release notes..."
          cat > "$CHANGELOG_FILE" << EOF
          # Release Notes $VERSION
          
          ## 🚀 What's New
          - Bug fixes and improvements
          
          ## 📱 Installation
          Download the APK from the releases page.
          
          ## 🔄 Changelog
          See commit history for detailed changes.
          EOF
        else
          echo "✅ Release notes found: $CHANGELOG_FILE"
        fi

  build-release:
    name: Build Release
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Update version in build.gradle
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        VERSION_NAME=${VERSION#v}  # Remove 'v' prefix
        VERSION_CODE=$GITHUB_RUN_NUMBER
        
        sed -i "s/versionName \".*\"/versionName \"$VERSION_NAME\"/" app/build.gradle
        sed -i "s/versionCode .*/versionCode $VERSION_CODE/" app/build.gradle
        
        echo "Updated version to: $VERSION_NAME (code: $VERSION_CODE)"
    
    - name: Run tests
      run: ./gradlew test --no-daemon --stacktrace
    
    - name: Run lint
      run: ./gradlew lint --no-daemon --stacktrace
    
    - name: Build release APK
      run: ./gradlew assembleRelease --no-daemon --stacktrace
    
    - name: Build debug APK
      run: ./gradlew assembleDebug --no-daemon --stacktrace
    
    - name: Generate APK checksums
      run: |
        cd app/build/outputs/apk
        find . -name "*.apk" -exec sha256sum {} \; > checksums.txt
        cat checksums.txt
    
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-apks-${{ needs.validate-release.outputs.version }}
        path: |
          app/build/outputs/apk/release/app-release.apk
          app/build/outputs/apk/debug/app-debug.apk
          app/build/outputs/apk/checksums.txt
        retention-days: 90

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download release artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-apks-${{ needs.validate-release.outputs.version }}
        path: ./artifacts
    
    - name: Prepare release assets
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        mkdir -p release-assets
        
        # Rename APKs with version
        if [ -f "artifacts/app-release.apk" ]; then
          cp "artifacts/app-release.apk" "release-assets/NotificationRemover-${VERSION}-release.apk"
        fi
        
        if [ -f "artifacts/app-debug.apk" ]; then
          cp "artifacts/app-debug.apk" "release-assets/NotificationRemover-${VERSION}-debug.apk"
        fi
        
        if [ -f "artifacts/checksums.txt" ]; then
          cp "artifacts/checksums.txt" "release-assets/"
        fi
        
        ls -la release-assets/
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.validate-release.outputs.version }}
        name: "NotificationRemover ${{ needs.validate-release.outputs.version }}"
        body_path: "RELEASE_NOTES_${{ needs.validate-release.outputs.version }}.md"
        files: |
          release-assets/*.apk
          release-assets/checksums.txt
        prerelease: ${{ needs.validate-release.outputs.is-prerelease }}
        draft: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update release statistics
      run: |
        echo "📊 Release Statistics for ${{ needs.validate-release.outputs.version }}"
        echo "================================================"
        echo "🔢 Build number: $GITHUB_RUN_NUMBER"
        echo "📅 Release date: $(date -u +%Y-%m-%d)"
        echo "🌿 Branch: ${{ github.ref_name }}"
        echo "📱 APKs created: $(ls -1 release-assets/*.apk | wc -l)"
        echo "📦 Total size: $(du -sh release-assets/ | cut -f1)"

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate-release, create-github-release]
    if: always()
    
    steps:
    - name: Notify Discord
      uses: Ilshidur/action-discord@master
      if: success()
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      with:
        args: |
          🚀 **New Release Available!**
          
          **NotificationRemover ${{ needs.validate-release.outputs.version }}** is now available!
          
          📱 **Download**: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }}
          🔄 **Changes**: Check release notes for details
          ${{ needs.validate-release.outputs.is-prerelease == 'true' && '⚠️ **Pre-release**: For testing only' || '✅ **Stable release**: Ready for production' }}
    
    - name: Create announcement issue
      uses: actions/github-script@v7
      if: success() && needs.validate-release.outputs.is-prerelease == 'false'
      with:
        script: |
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '📢 Release ${{ needs.validate-release.outputs.version }} Available',
            body: `
            ## 🎉 New Release: NotificationRemover ${{ needs.validate-release.outputs.version }}
            
            A new stable release is now available!
            
            ### 📱 Download
            - [Release Page](https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }})
            - [Direct APK Download](https://github.com/${{ github.repository }}/releases/download/${{ needs.validate-release.outputs.version }}/NotificationRemover-${{ needs.validate-release.outputs.version }}-release.apk)
            
            ### 📋 What's New
            Check the [release notes](https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }}) for detailed changes.
            
            ### 🧪 Testing
            Please test the new version and report any issues.
            
            ### 🙏 Feedback
            Let us know what you think about the new features!
            
            ---
            *This announcement was automatically created by GitHub Actions.*
            `,
            labels: ['announcement', 'release']
          });